# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:46:11+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class ApplicationArn(
    RootModel[
        constr(
            pattern=r'arn:aws[-a-z]*:servicecatalog:[a-z]{2}(-gov)?-[a-z]+-\d:\d{12}:/applications/[a-z0-9]+'
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[-a-z]*:servicecatalog:[a-z]{2}(-gov)?-[a-z]+-\d:\d{12}:/applications/[a-z0-9]+'
    )


class ApplicationId(
    RootModel[constr(pattern=r'[a-z0-9]+', min_length=26, max_length=26)]
):
    root: constr(pattern=r'[a-z0-9]+', min_length=26, max_length=26)


class ApplicationSpecifier(
    RootModel[
        constr(
            pattern=r'([-.\w]+)|(arn:aws[-a-z]*:servicecatalog:[a-z]{2}(-gov)?-[a-z]+-\d:\d{12}:/applications/[-.\w]+)',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'([-.\w]+)|(arn:aws[-a-z]*:servicecatalog:[a-z]{2}(-gov)?-[a-z]+-\d:\d{12}:/applications/[-.\w]+)',
        min_length=1,
        max_length=256,
    )


class Arn(
    RootModel[
        constr(
            pattern=r'arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)',
            min_length=1,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)',
        min_length=1,
        max_length=1600,
    )


class AssociateAttributeGroupRequest(BaseModel):
    pass


class AssociateResourceRequest(BaseModel):
    pass


class AssociateResourceResponse(BaseModel):
    applicationArn: Optional[ApplicationArn] = None
    resourceArn: Optional[Arn] = None


class AssociationCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class AttributeGroupArn(
    RootModel[
        constr(
            pattern=r'arn:aws[-a-z]*:servicecatalog:[a-z]{2}(-gov)?-[a-z]+-\d:\d{12}:/attribute-groups/[-.\w]+'
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[-a-z]*:servicecatalog:[a-z]{2}(-gov)?-[a-z]+-\d:\d{12}:/attribute-groups/[-.\w]+'
    )


class AttributeGroupId(
    RootModel[constr(pattern=r'[-.\w]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[-.\w]+', min_length=1, max_length=256)


class AttributeGroupIds(RootModel[List[AttributeGroupId]]):
    root: List[AttributeGroupId]


class AttributeGroupSpecifier(
    RootModel[
        constr(
            pattern=r'([-.\w]+)|(arn:aws[-a-z]*:servicecatalog:[a-z]{2}(-gov)?-[a-z]+-\d:\d{12}:/attribute-groups/[-.\w]+)',
            min_length=1,
            max_length=512,
        )
    ]
):
    root: constr(
        pattern=r'([-.\w]+)|(arn:aws[-a-z]*:servicecatalog:[a-z]{2}(-gov)?-[a-z]+-\d:\d{12}:/attribute-groups/[-.\w]+)',
        min_length=1,
        max_length=512,
    )


class Attributes(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=8000
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=8000
    )


class ClientToken(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=128)


class ConflictException(RootModel[Any]):
    root: Any


class CreatedBy(
    RootModel[
        constr(
            pattern=r'^(?!-)([a-z0-9-]+\.)+(aws\.internal|amazonaws\.com(\.cn)?)$',
            min_length=1,
            max_length=128,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^(?!-)([a-z0-9-]+\.)+(aws\.internal|amazonaws\.com(\.cn)?)$',
        min_length=1,
        max_length=128,
    )


class DeleteApplicationRequest(BaseModel):
    pass


class DeleteAttributeGroupRequest(BaseModel):
    pass


class Description(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class DisassociateAttributeGroupRequest(BaseModel):
    pass


class DisassociateAttributeGroupResponse(BaseModel):
    applicationArn: Optional[ApplicationArn] = None
    attributeGroupArn: Optional[AttributeGroupArn] = None


class DisassociateResourceRequest(BaseModel):
    pass


class DisassociateResourceResponse(BaseModel):
    applicationArn: Optional[ApplicationArn] = None
    resourceArn: Optional[Arn] = None


class GetApplicationRequest(BaseModel):
    pass


class GetAssociatedResourceRequest(BaseModel):
    pass


class GetAttributeGroupRequest(BaseModel):
    pass


class InternalServerException(RootModel[Any]):
    root: Any


class ListApplicationsRequest(BaseModel):
    pass


class ListAssociatedAttributeGroupsRequest(BaseModel):
    pass


class ListAssociatedResourcesRequest(BaseModel):
    pass


class ListAttributeGroupsForApplicationRequest(BaseModel):
    pass


class ListAttributeGroupsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class Name(RootModel[constr(pattern=r'[-.\w]+', min_length=1, max_length=256)]):
    root: constr(pattern=r'[-.\w]+', min_length=1, max_length=256)


class NextToken(
    RootModel[constr(pattern=r'[A-Za-z0-9+/=]+', min_length=1, max_length=2024)]
):
    root: constr(pattern=r'[A-Za-z0-9+/=]+', min_length=1, max_length=2024)


class ResourceGroupState(Enum):
    CREATING = 'CREATING'
    CREATE_COMPLETE = 'CREATE_COMPLETE'
    CREATE_FAILED = 'CREATE_FAILED'
    UPDATING = 'UPDATING'
    UPDATE_COMPLETE = 'UPDATE_COMPLETE'
    UPDATE_FAILED = 'UPDATE_FAILED'


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceSpecifier(
    RootModel[constr(pattern=r'\S+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'\S+', min_length=1, max_length=256)


class ResourceType(Enum):
    CFN_STACK = 'CFN_STACK'
    RESOURCE_TAG_VALUE = 'RESOURCE_TAG_VALUE'


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class StackArn(
    RootModel[
        constr(
            pattern=r'arn:aws[-a-z]*:cloudformation:[a-z]{2}(-gov)?-[a-z]+-\d:\d{12}:stack/[a-zA-Z][-A-Za-z0-9]{0,127}/[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}'
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[-a-z]*:cloudformation:[a-z]{2}(-gov)?-[a-z]+-\d:\d{12}:stack/[a-zA-Z][-A-Za-z0-9]{0,127}/[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}'
    )


class String(RootModel[str]):
    root: str


class SyncAction(Enum):
    START_SYNC = 'START_SYNC'
    NO_ACTION = 'NO_ACTION'


class SyncResourceRequest(BaseModel):
    pass


class SyncResourceResponse(BaseModel):
    actionTaken: Optional[SyncAction] = None
    applicationArn: Optional[ApplicationArn] = None
    resourceArn: Optional[Arn] = None


class TagKey(
    RootModel[constr(pattern=r'[a-zA-Z+-=._:/]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z+-=._:/]+', min_length=1, max_length=128)


class TagKeyConfig(
    RootModel[
        constr(
            pattern=r'^(?!\s+$)[\p{L}\p{Z}\p{N}_.:/=+\-@]*',
            min_length=0,
            max_length=128,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^(?!\s+$)[\p{L}\p{Z}\p{N}_.:/=+\-@]*', min_length=0, max_length=128
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=0)


class TagQueryConfiguration(BaseModel):
    tagKey: Optional[TagKeyConfig] = None


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[constr(pattern=r'[\p{L}\p{Z}\p{N}_.:/=+\-@]*', max_length=256)]
):
    root: constr(pattern=r'[\p{L}\p{Z}\p{N}_.:/=+\-@]*', max_length=256)


class Tags(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class ThrottlingException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateApplicationRequest(BaseModel):
    description: Optional[Description] = None
    name: Optional[Name] = None


class UpdateAttributeGroupRequest(BaseModel):
    attributes: Optional[Attributes] = None
    description: Optional[Description] = None
    name: Optional[Name] = None


class ValidationException(RootModel[Any]):
    root: Any


class ApplicationsPostRequest(BaseModel):
    clientToken: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=128
    ) = Field(
        ...,
        description='A unique identifier that you provide to ensure idempotency. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails.',
    )
    description: Optional[constr(max_length=1024)] = Field(
        None, description='The description of the application.'
    )
    name: constr(pattern=r'[-.\w]+', min_length=1, max_length=256) = Field(
        ...,
        description='The name of the application. The name must be unique in the region in which you are creating the application.',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='Key-value pairs you can use to associate with the application.',
    )


class ApplicationsApplicationPatchRequest(BaseModel):
    description: Optional[constr(max_length=1024)] = Field(
        None, description='The new description of the application.'
    )
    name: Optional[constr(pattern=r'[-.\w]+', min_length=1, max_length=256)] = Field(
        None,
        description='Deprecated: The new name of the application. The name must be unique in the region in which you are updating the application. Please do not use this field as we have stopped supporting name updates.',
    )


class AttributeGroupsPostRequest(BaseModel):
    attributes: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=8000
    ) = Field(
        ...,
        description='A JSON string in the form of nested key-value pairs that represent the attributes in the group and describes an application and its components.',
    )
    clientToken: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=128
    ) = Field(
        ...,
        description='A unique identifier that you provide to ensure idempotency. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails.',
    )
    description: Optional[constr(max_length=1024)] = Field(
        None,
        description='The description of the attribute group that the user provides.',
    )
    name: constr(pattern=r'[-.\w]+', min_length=1, max_length=256) = Field(
        ..., description='The name of the attribute group.'
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='Key-value pairs you can use to associate with the attribute group.',
    )


class AttributeGroupsAttributeGroupPatchRequest(BaseModel):
    attributes: Optional[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=8000
        )
    ] = Field(
        None,
        description='A JSON string in the form of nested key-value pairs that represent the attributes in the group and describes an application and its components.',
    )
    description: Optional[constr(max_length=1024)] = Field(
        None,
        description='The description of the attribute group that the user provides.',
    )
    name: Optional[constr(pattern=r'[-.\w]+', min_length=1, max_length=256)] = Field(
        None,
        description='Deprecated: The new name of the attribute group. The name must be unique in the region in which you are updating the attribute group. Please do not use this field as we have stopped supporting name updates.',
    )


class Configuration(BaseModel):
    tagQueryConfiguration: Optional[TagQueryConfiguration] = None


class ConfigurationPutRequest(BaseModel):
    configuration: Configuration = Field(
        ..., description=' Includes all of the AppRegistry settings. '
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, TagValue] = Field(
        ..., description='The new or modified tags for the resource.'
    )


class AppRegistryConfiguration(BaseModel):
    tagQueryConfiguration: Optional[TagQueryConfiguration] = None


class Application(BaseModel):
    arn: Optional[ApplicationArn] = None
    creationTime: Optional[Timestamp] = None
    description: Optional[Description] = None
    id: Optional[ApplicationId] = None
    lastUpdateTime: Optional[Timestamp] = None
    name: Optional[Name] = None
    tags: Optional[Tags] = None


class ApplicationSummary(BaseModel):
    arn: Optional[ApplicationArn] = None
    creationTime: Optional[Timestamp] = None
    description: Optional[Description] = None
    id: Optional[ApplicationId] = None
    lastUpdateTime: Optional[Timestamp] = None
    name: Optional[Name] = None


class AssociateAttributeGroupResponse(BaseModel):
    applicationArn: Optional[ApplicationArn] = None
    attributeGroupArn: Optional[AttributeGroupArn] = None


class AttributeGroup(BaseModel):
    arn: Optional[AttributeGroupArn] = None
    creationTime: Optional[Timestamp] = None
    description: Optional[Description] = None
    id: Optional[AttributeGroupId] = None
    lastUpdateTime: Optional[Timestamp] = None
    name: Optional[Name] = None
    tags: Optional[Tags] = None


class AttributeGroupDetails(BaseModel):
    arn: Optional[AttributeGroupArn] = None
    createdBy: Optional[CreatedBy] = None
    id: Optional[AttributeGroupId] = None
    name: Optional[Name] = None


class AttributeGroupDetailsList(RootModel[List[AttributeGroupDetails]]):
    root: List[AttributeGroupDetails]


class AttributeGroupSummary(BaseModel):
    arn: Optional[AttributeGroupArn] = None
    createdBy: Optional[CreatedBy] = None
    creationTime: Optional[Timestamp] = None
    description: Optional[Description] = None
    id: Optional[AttributeGroupId] = None
    lastUpdateTime: Optional[Timestamp] = None
    name: Optional[Name] = None


class CreateApplicationRequest(BaseModel):
    clientToken: ClientToken
    description: Optional[Description] = None
    name: Name
    tags: Optional[Tags] = None


class CreateApplicationResponse(BaseModel):
    application: Optional[Application] = None


class CreateAttributeGroupRequest(BaseModel):
    attributes: Attributes
    clientToken: ClientToken
    description: Optional[Description] = None
    name: Name
    tags: Optional[Tags] = None


class CreateAttributeGroupResponse(BaseModel):
    attributeGroup: Optional[AttributeGroup] = None


class DeleteApplicationResponse(BaseModel):
    application: Optional[ApplicationSummary] = None


class DeleteAttributeGroupResponse(BaseModel):
    attributeGroup: Optional[AttributeGroupSummary] = None


class GetAttributeGroupResponse(BaseModel):
    arn: Optional[AttributeGroupArn] = None
    attributes: Optional[Attributes] = None
    createdBy: Optional[CreatedBy] = None
    creationTime: Optional[Timestamp] = None
    description: Optional[Description] = None
    id: Optional[AttributeGroupId] = None
    lastUpdateTime: Optional[Timestamp] = None
    name: Optional[Name] = None
    tags: Optional[Tags] = None


class GetConfigurationResponse(BaseModel):
    configuration: Optional[AppRegistryConfiguration] = None


class ListAssociatedAttributeGroupsResponse(BaseModel):
    attributeGroups: Optional[AttributeGroupIds] = None
    nextToken: Optional[NextToken] = None


class ListAttributeGroupsForApplicationResponse(BaseModel):
    attributeGroupsDetails: Optional[AttributeGroupDetailsList] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[Tags] = None


class PutConfigurationRequest(BaseModel):
    configuration: AppRegistryConfiguration


class ResourceDetails(BaseModel):
    tagValue: Optional[TagValue] = None


class ResourceGroup(BaseModel):
    arn: Optional[Arn] = None
    errorMessage: Optional[String] = None
    state: Optional[ResourceGroupState] = None


class ResourceInfo(BaseModel):
    arn: Optional[Arn] = None
    name: Optional[ResourceSpecifier] = None
    resourceDetails: Optional[ResourceDetails] = None
    resourceType: Optional[ResourceType] = None


class ResourceIntegrations(BaseModel):
    resourceGroup: Optional[ResourceGroup] = None


class Resources(RootModel[List[ResourceInfo]]):
    root: List[ResourceInfo]


class TagResourceRequest(BaseModel):
    tags: Tags


class UpdateApplicationResponse(BaseModel):
    application: Optional[Application] = None


class UpdateAttributeGroupResponse(BaseModel):
    attributeGroup: Optional[AttributeGroup] = None


class ApplicationSummaries(RootModel[List[ApplicationSummary]]):
    root: List[ApplicationSummary]


class AttributeGroupSummaries(RootModel[List[AttributeGroupSummary]]):
    root: List[AttributeGroupSummary]


class Integrations(BaseModel):
    resourceGroup: Optional[ResourceGroup] = None


class ListApplicationsResponse(BaseModel):
    applications: Optional[ApplicationSummaries] = None
    nextToken: Optional[NextToken] = None


class ListAssociatedResourcesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    resources: Optional[Resources] = None


class ListAttributeGroupsResponse(BaseModel):
    attributeGroups: Optional[AttributeGroupSummaries] = None
    nextToken: Optional[NextToken] = None


class Resource(BaseModel):
    arn: Optional[StackArn] = None
    associationTime: Optional[Timestamp] = None
    integrations: Optional[ResourceIntegrations] = None
    name: Optional[ResourceSpecifier] = None


class GetApplicationResponse(BaseModel):
    arn: Optional[ApplicationArn] = None
    associatedResourceCount: Optional[AssociationCount] = None
    creationTime: Optional[Timestamp] = None
    description: Optional[Description] = None
    id: Optional[ApplicationId] = None
    integrations: Optional[Integrations] = None
    lastUpdateTime: Optional[Timestamp] = None
    name: Optional[Name] = None
    tags: Optional[Tags] = None


class GetAssociatedResourceResponse(BaseModel):
    resource: Optional[Resource] = None
